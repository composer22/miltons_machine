== Milton's Machine

Milton's Machine's goal is to provide a "practical" application of theoretic and  spectral tools for musical
composition, with some support for analysis.

Milton's machine provides:
* Generator - a class for producing new materials, such as permutations
* ForteDictionary - a class that provides a dictionary of pitch class sets as cataloged by Forte.
* ForteSet - an extention to the Ruby Array class that adds additional operations for modulo 12 operations.
* MatrixAnalyser  - a class for analysing rows, including the ability to rotate them
* Spectrum - a class for manipulating sonic space (harmonics, scales etc)
* Tuning - a class for manipulating and loading tunings related to different tonalities and microtonality.

== Information

=== The Milton's Machine wiki

TBD - the Milton's Machine Wiki will have additional information including answers to your most frequently asked
questions.

=== Bug reports

If you discover a problem with Milton's Machine, we would like to know about it.   Simply sign into github and report
the issue.

=== RDocs

You can view the Milton's Machine documentation in RDoc format here:

http://rubydoc.info/github/composer22/miltons_machine/master/frames

Look at each class for examples.

=== Contributing

This is a personal project for the time being.  Please contact me if you have any cool ideas.

=== Installation

Not publically release yet, as I continue to add things, but eventually you'll just download it via...

    gem install miltons_machine

=== Getting started

Simply add this to your code

    require 'miltons_machine'

Plans are in the works for demo code directory.  But...

Here's an example of using MatrixAnalyzer for finding counterpoint with "row row row your boat"

    # From the beats of the melody.
    melody = [0, 0, 0, 4, 4, 4, 7, 7, 0, 7, 2, 0, 7, 3, 0, 0]

    # Sonorities to search for:
    major = [0, 4, 7]    # 3-11i
    minor = [0, 3, 7]    # 3-11

    analysis_engine = MiltonsMachine::Tools::MatrixAnalyzer.new
    analysis_engine.report_details=(true)

    # First add the rows.  Three voices = triadic; independently rotated by setting them in separate groups
    analysis_engine.add_row(1, melody)
    analysis_engine.add_row(2, melody)
    analysis_engine.add_row(3, melody)

    # Then, create all transpositions of sets to search for:
    0.upto(11) do |i|
      #analysis_engine.add_search_set(major, i)            # TnI
      #analysis_engine.add_search_set(minor, i)            # Tn
      analysis_engine.add_forte_set("3-11", i)             # Tn      <== or optionally use Forte Set names like here
      analysis_engine.add_forte_set("3-11i", i)            # TnI
    end

    analysis_engine.run_rotation_analysis

Output sample - one detail analysis of a possible rotation and the run summary:

    [0, 0, 0, 4, 4, 4, 7, 7, 0, 7, 2, 0, 7, 3, 0, 0]  Group 1 <== original melody
    [4, 4, 7, 7, 0, 7, 2, 0, 7, 3, 0, 0, 0, 0, 0, 4]  Group 2 <== melody rotated 12x
    [0, 7, 2, 0, 7, 3, 0, 0, 0, 0, 0, 4, 4, 4, 7, 7]  Group 3 <== melody rotated 8x
    ---------
    [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1]  Score  <== the # maj/min sets (analysis)
    Total Score: 6

    ...

    Score : # Instances
    -------------------
        0 :    46
        1 :    18
        2 :    48
        3 :    72
        4 :    24
        5 :    42
        6 :     6  <== most saturated found = 6 solutions ex: the detail above

ex:  there are 42 permutation solutions that have 5 columns holding major or minor chords

== License

MIT License. Copyright 2011