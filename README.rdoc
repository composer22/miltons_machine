== Milton's Machine

Milton's Machine's goal is to provide a "practical" application of set theory tools for musical
composition, with some support for analysis - as defined in the various contexts of 12 tone theory and its offshoots
(e.g. Forte, Morris, Starr, Lewin, Cohn, etc.).

Milton's machine provides:
* MatrixAnalyser  - a class for analysing rows, including the ability to rotate them
* ForteSets - a class that provides a dictionary of pitch class sets as cataloged by Forte, including a set of operations
to act on them via modulo 12.

== Information

=== The Milton's Machine wiki

TBD - the Milton's Machine Wiki will have additional information including answers to the most frequently asked questions.

=== Bug reports

If you discover a problem with Milton's Machine, we would like to know about it.   Simply sign into github and report
the issue.


=== RDocs

You can view the Milton's Machine documentation in RDoc format here:

http://rubydoc.info/github/composer22/miltons-machine/master/frames


=== Contributing

We hope that you will consider contributing to Milton's Machine. Please contact us if you have any cool ideas.

== Installation

  gem install miltons-machine

== Getting started

Class: Matrix Analyzer

Given an array where each element in the array is a group of rows - each row representing ordered musical pitches:
Permutate each group of rows in parallel using rotation.  After each rotation search each column (intersecting all
groups) for a pattern of sonorities from a dictionary. If a sonority is found, then tabulate a score for comparison
reporting.

Useful for counterpoint such as creating a canon, composing 12t, or deriving set related composition designs where
we want to know the maximum or minimum material in the harmony.

NOTE: Performance is an issue right now with larger number of voices and pitches since performance is measured
from: number of permutations =  x^(n-1) where x = number of columns and n is the number of groups.

For example:  50 columns and 8 groups of one row in each group would generate 50^7 permutations
or 781,250,000,000 possible rotations to search through.

example: <b>"row row row your boat"</b>

    # From the beats of the melody.
    melody = [0, 0, 0, 4, 4, 4, 7, 7, 0, 7, 2, 0, 7, 3, 0, 0]

    # Sonorities to search for:
    major = [0, 4, 7]    # 3-11i
    minor = [0, 3, 7]    # 3-11

    analysis_engine = MatrixAnalyzer.new
    analysis_engine.report_details=(true)

    # First add the rows.  Three voices = triadic; independently rotated by setting them in separate groups
    analysis_engine.add_row(1, melody)
    analysis_engine.add_row(2, melody)
    analysis_engine.add_row(3, melody)

    # Then, create all transpositions of sets to search for:
    0.upto(11) do |i|
      #analysis_engine.add_search_set(major, i)            # TnI
      #analysis_engine.add_search_set(minor, i)            # Tn
      analysis_engine.add_forte_set("3-11", i)             # Tn      <== or optionally use Forte Set names
      analysis_engine.add_forte_set("3-11i", i)            # TnI     <== or optionally use Forte Set names
    end

    analysis_engine.run_analysis

Output sample - one detail analysis of a possible rotation and the run summary:

    [0, 0, 0, 4, 4, 4, 7, 7, 0, 7, 2, 0, 7, 3, 0, 0]  Group 1 <== original melody
    [4, 4, 7, 7, 0, 7, 2, 0, 7, 3, 0, 0, 0, 0, 0, 4]  Group 2 <== melody rotated 12x
    [0, 7, 2, 0, 7, 3, 0, 0, 0, 0, 0, 4, 4, 4, 7, 7]  Group 3 <== melody rotated 8x
    ---------
    [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1]  Score  <== the # maj/min sets (analysis)
    Total Score: 6

    ...

    Score : # Instances
    -------------------
        0 :    46
        1 :    18
        2 :    48
        3 :    72
        4 :    24
        5 :    42
        6 :     6  <== most saturated found = 6 solutions ex: the detail above

ex:  there are 42 permutation solutions that have 5 columns holding major or minor chords

== License

MIT License. Copyright 2011